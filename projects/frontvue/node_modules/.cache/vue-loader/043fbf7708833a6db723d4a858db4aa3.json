{"remainingRequest":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\src\\views\\Teste.vue?vue&type=template&id=0d64d2c9&","dependencies":[{"path":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\src\\views\\Teste.vue","mtime":1647799956883},{"path":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646505497696},{"path":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1646505547226},{"path":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646505497696},{"path":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\index.js","mtime":1646505530049}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}