{"remainingRequest":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\src\\views\\Replic.vue?vue&type=template&id=3d2a61fa&scoped=true&","dependencies":[{"path":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\src\\views\\Replic.vue","mtime":1651112283824},{"path":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648859275688},{"path":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1648859291448},{"path":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648859275688},{"path":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\index.js","mtime":1648859291446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}