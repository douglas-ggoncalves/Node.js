{"remainingRequest":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\src\\views\\Home.vue","mtime":1650161015798},{"path":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648859275688},{"path":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1648859291448},{"path":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648859275688},{"path":"C:\\Users\\SSD\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\index.js","mtime":1648859291446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}