{"remainingRequest":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\src\\views\\Replic.vue?vue&type=template&id=3d2a61fa&scoped=true&","dependencies":[{"path":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\src\\views\\Replic.vue","mtime":1648516596467},{"path":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646505497696},{"path":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1646505547226},{"path":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646505497696},{"path":"C:\\Users\\dougl\\Documents\\GitHub\\Node.js\\projects\\frontvue\\node_modules\\vue-loader\\lib\\index.js","mtime":1646505530049}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}